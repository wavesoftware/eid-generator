/*
 * The MIT License
 *
 * Copyright 2014 Wave Software.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package pl.wavesoftware.netbeans.eid.generator.views;

import java.awt.event.ItemEvent;
import java.util.prefs.Preferences;
import org.openide.util.NbPreferences;
import pl.wavesoftware.netbeans.eid.generator.mapper.GeneratorFactory;
import pl.wavesoftware.netbeans.eid.generator.mapper.PolicyMapper;
import pl.wavesoftware.netbeans.eid.generator.model.EidGenerator;
import pl.wavesoftware.netbeans.eid.generator.model.Policy;

final class EIDGeneratorPanel extends javax.swing.JPanel {

    private final EIDGeneratorOptionsPanelController controller;
    private final GeneratorFactory generatorFactory = new GeneratorFactory();

    EIDGeneratorPanel(EIDGeneratorOptionsPanelController controller) {
        this.controller = controller;
        initComponents();
        // TODO listen to changes in form fields and call controller.changed()
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        policyDateRadioButton = new javax.swing.JRadioButton();
        randomNumberRadioButton = new javax.swing.JRadioButton();
        randomHashRadioButton = new javax.swing.JRadioButton();
        formatComboBox = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jFormattedTextField1 = new javax.swing.JFormattedTextField();
        jButton1 = new javax.swing.JButton();

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(EIDGeneratorPanel.class, "EIDGeneratorPanel.jLabel1.text")); // NOI18N

        buttonGroup1.add(policyDateRadioButton);
        policyDateRadioButton.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(policyDateRadioButton, org.openide.util.NbBundle.getMessage(EIDGeneratorPanel.class, "EIDGeneratorPanel.policyDateRadioButton.text")); // NOI18N
        policyDateRadioButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                policyDateRadioButtonItemStateChanged(evt);
            }
        });

        buttonGroup1.add(randomNumberRadioButton);
        org.openide.awt.Mnemonics.setLocalizedText(randomNumberRadioButton, org.openide.util.NbBundle.getMessage(EIDGeneratorPanel.class, "EIDGeneratorPanel.randomNumberRadioButton.text")); // NOI18N

        buttonGroup1.add(randomHashRadioButton);
        org.openide.awt.Mnemonics.setLocalizedText(randomHashRadioButton, org.openide.util.NbBundle.getMessage(EIDGeneratorPanel.class, "EIDGeneratorPanel.randomHashRadioButton.text")); // NOI18N

        formatComboBox.setEditable(true);
        formatComboBox.setFont(new java.awt.Font("Monospaced", 0, 13)); // NOI18N
        formatComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "yyyyMMdd:HHmmss", "yyyyMMddHHmmss", "yyMMddHHmmss", "yyyy-MM-dd HH:mm:ss" }));

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(EIDGeneratorPanel.class, "EIDGeneratorPanel.jLabel2.text")); // NOI18N

        jFormattedTextField1.setEditable(false);
        jFormattedTextField1.setText(org.openide.util.NbBundle.getMessage(EIDGeneratorPanel.class, "EIDGeneratorPanel.jFormattedTextField1.text")); // NOI18N
        jFormattedTextField1.setFont(new java.awt.Font("Monospaced", 0, 13)); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jButton1, org.openide.util.NbBundle.getMessage(EIDGeneratorPanel.class, "EIDGeneratorPanel.jButton1.text")); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(policyDateRadioButton)
                        .addGap(48, 48, 48)
                        .addComponent(formatComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(randomNumberRadioButton)
                    .addComponent(randomHashRadioButton)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jFormattedTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(policyDateRadioButton)
                    .addComponent(formatComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(randomNumberRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(randomHashRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jFormattedTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        Policy policy = makeModel();
        EidGenerator generator = generatorFactory.create(policy);
        jFormattedTextField1.setText(generator.generate());
    }//GEN-LAST:event_jButton1ActionPerformed

    private void policyDateRadioButtonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_policyDateRadioButtonItemStateChanged
        formatComboBox.setEnabled(evt.getStateChange() == ItemEvent.SELECTED);
    }//GEN-LAST:event_policyDateRadioButtonItemStateChanged

    void load() {
        Preferences prefs = NbPreferences.forModule(EIDGeneratorPanel.class);
        PolicyMapper mapper = new PolicyMapper(prefs);
        Policy policy = mapper.load();
        updateModel(policy);
    }

    protected void updateModel(Policy policy) {
        policyDateRadioButton.setSelected(policy.getType().equals(Policy.Type.DATE));
        randomNumberRadioButton.setSelected(policy.getType().equals(Policy.Type.RANDOM_NUMBER));
        randomNumberRadioButton.setSelected(policy.getType().equals(Policy.Type.RANDOM_HASH));
        if (policy.getType().equals(Policy.Type.DATE)) {
            String format = policy.getFormat();
            formatComboBox.getModel().setSelectedItem(format);
        }
    }

    protected Policy makeModel() {
        Policy policy = new Policy();
        if (policyDateRadioButton.isSelected()) {
            policy.setType(Policy.Type.DATE);
            String format = formatComboBox.getSelectedItem().toString();
            policy.setFormat(format);
        } else if (randomNumberRadioButton.isSelected()) {
            policy.setType(Policy.Type.RANDOM_NUMBER);
        } else if (randomHashRadioButton.isSelected()) {
            policy.setType(Policy.Type.RANDOM_HASH);
        }
        return policy;
    }

    void store() {
        Preferences prefs = NbPreferences.forModule(EIDGeneratorPanel.class);
        PolicyMapper mapper = new PolicyMapper(prefs);
        mapper.save(makeModel());
    }

    boolean valid() {
        // TODO check whether form is consistent and complete
        return true;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox formatComboBox;
    private javax.swing.JButton jButton1;
    private javax.swing.JFormattedTextField jFormattedTextField1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JRadioButton policyDateRadioButton;
    private javax.swing.JRadioButton randomHashRadioButton;
    private javax.swing.JRadioButton randomNumberRadioButton;
    // End of variables declaration//GEN-END:variables
}
